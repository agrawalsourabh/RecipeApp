{"version":3,"sources":["components/recipe/Recipe.js","components/search/Search.js","components/scrollbar/Scrollbar.js","containers/App.js","serviceWorker.js","index.js"],"names":["Recipe","ingredientList","this","props","result","recipe","ingredients","map","ingredient","text","className","src","image","alt","label","React","Component","Search","type","placeholder","onChange","searchChange","onClick","searchBtnClick","Scrollbar","children","App","onSearchChange","event","setState","searchField","target","value","onSearchBtnClick","url","state","app_id","app_key","console","log","fetch","then","res","json","data","recipes","hits","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0TAuBeA,G,mLAjBb,IAAMC,EAAiBC,KAAKC,MAAMC,OAAOC,OAAOC,YAAYC,KAAI,SAAAC,GAC5D,OAAO,4BAAKA,EAAWC,SAG3B,OACC,yBAAKC,UAAU,yDACd,yBAAKA,UAAU,aAAaC,IAAKT,KAAKC,MAAMC,OAAOC,OAAOO,MAAOC,IAAI,SACrE,wBAAIH,UAAU,YAAd,IAA2BR,KAAKC,MAAMC,OAAOC,OAAOS,MAApD,KACA,wBAAIJ,UAAU,4BAAd,iBACA,4BACET,Q,GAbec,IAAMC,YCWZC,G,6KATb,OACC,yBAAKP,UAAU,UACd,2BAAOA,UAAU,eAAeQ,KAAK,SAASC,YAAY,gBAAgBC,SAAYlB,KAAKC,MAAMkB,eACjG,4BAAQX,UAAU,0BAA0BY,QAAWpB,KAAKC,MAAMoB,gBAAlE,iB,GALiBR,IAAMC,YCSZQ,G,MATG,SAACrB,GAClB,OACC,yBAAKO,UAAU,aACbP,EAAMsB,YC+DKC,E,kDA7Db,aAAc,IAAD,8BACX,gBAWFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAb9B,EAgBbC,iBAAmB,WACjB,IAAMC,EAAG,0CAAuC,EAAKC,MAAML,YAAlD,mBAAwE,EAAKM,OAA7E,oBAA+F,EAAKC,SAC7GC,QAAQC,IAAI,EAAKJ,MAAML,aACvBQ,QAAQC,IAAIL,GAEZM,MAAMN,GACLO,MAAK,SAACC,GACL,OAAOA,EAAIC,UAEZF,MAAK,SAACG,GACL,EAAKf,SAAS,CAACgB,QAASD,EAAKE,WAxB/B,EAAKV,OAAS,WACd,EAAKC,QAAU,mCAGf,EAAKF,MAAQ,CACXU,QAAU,GACVf,YAAc,IARL,E,gEA8BO,IAAD,OACXI,EAAG,wDAAqDhC,KAAKkC,OAA1D,oBAA4ElC,KAAKmC,SAE1FG,MAAMN,GACLO,MAAK,SAACC,GACL,OAAOA,EAAIC,UAEZF,MAAK,SAACG,GACL,EAAKf,SAAS,CAACgB,QAASD,EAAKE,Y,+BAK/B,OACE,yBAAKpC,UAAU,OACX,kBAAC,EAAD,CAAQW,aAAgBnB,KAAKyB,eAAgBJ,eAAkBrB,KAAK+B,mBAEpE,kBAAE,EAAF,KACE,yBAAKvB,UAAU,qBACZR,KAAKiC,MAAMU,QAAQtC,KAAI,SAAAF,GAAM,OAC5B,kBAAC,EAAD,CAAQD,OAAQC,c,GApDdU,IAAMC,W,MCMJ+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.1a9f9354.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Recipe.css';\r\n\r\nclass Recipe extends React.Component{\r\n\t\r\n\trender(){\r\n\t\tconst ingredientList = this.props.result.recipe.ingredients.map(ingredient =>{\r\n\t\t\t\t\t\treturn <li>{ingredient.text}</li>\r\n\t\t})\r\n\r\n\t\treturn(\r\n\t\t\t<div className='recipe grow br2 ba dark-gray b--black-10 mw5 shadow-4'>\r\n\t\t\t\t<img className='food-image' src={this.props.result.recipe.image} alt='food' />\r\n\t\t\t\t<h2 className='title f4'> {this.props.result.recipe.label} </h2>\r\n\t\t\t\t<h3 className='ingredients f5 f5-ns mv0'> Ingredients </h3>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t{ingredientList}\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Recipe;","import React from 'react';\r\nimport './Search.css'\r\n\r\nclass Search extends React.Component{\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div className='search'>\r\n\t\t\t\t<input className='search-input' type='search' placeholder='search recipe' onChange = {this.props.searchChange}/>\r\n\t\t\t\t<button className='submit-btn bg-green br3' onClick = {this.props.searchBtnClick}> Search </button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Search;","import React from 'react'\r\nimport './Scrollbar.css'\r\n\r\nconst Scrollbar = (props) => {\r\n\treturn(\r\n\t\t<div className='scrollbar'>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n\t\r\n};\r\n\r\nexport default Scrollbar;","import React from 'react';\nimport './App.css';\nimport Recipe from '../components/recipe/Recipe'\nimport Search from '../components/search/Search'\nimport Scrollbar from '../components/scrollbar/Scrollbar'\n\nclass App extends React.Component {\n\n  constructor(){\n    super();\n    this.app_id = 'c729177d';\n    this.app_key = '6333bde595e200c8d1468d47b38c589d';\n    \n\n    this.state = {\n      recipes : [],\n      searchField : \"\"\n    }\n  }\n\n  onSearchChange = (event) => {\n    this.setState({searchField: event.target.value});\n  }\n\n  onSearchBtnClick = () =>{\n    const url =  `https://api.edamam.com/search?q=${this.state.searchField}&app_id=${this.app_id}&app_key=${this.app_key}`;\n    console.log(this.state.searchField);\n    console.log(url);\n\n    fetch(url)\n    .then((res) => {\n      return res.json();\n    })\n    .then((data) => {\n      this.setState({recipes: data.hits});\n    });\n  }\n\n  componentDidMount(){\n    const url =  `https://api.edamam.com/search?q=coffee&app_id=${this.app_id}&app_key=${this.app_key}`;\n    \n    fetch(url)\n    .then((res) => {\n      return res.json();\n    })\n    .then((data) => {\n      this.setState({recipes: data.hits});\n    });\n  }\n  \n  render(){\n    return (\n      <div className=\"App\">\n          <Search searchChange = {this.onSearchChange} searchBtnClick = {this.onSearchBtnClick}/>\n\n          < Scrollbar>\n            <div className=\"recipes_container\">\n              {this.state.recipes.map(recipe => (\n                <Recipe result={recipe}/>\n              ))}\n            </div>\n          </Scrollbar>\n          \n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}